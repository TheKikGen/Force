Steps to create armfs environment on Windows WSL2:

1 - Install multistrap and qemu:
	apt -y install multistrap
	apt -y install qemu
	apt -y install qemu-user-static
	apt -y install binfmt-support
	apt -y install dpkg-cross
	(update-binfmts --enable qemu-arm)

2 - Patch /usr/sbin/multistrap around line 325:
	$config_str .= " -o Apt::Get::Download-Only=true";
	$config_str .= " -o Apt::Install-Recommends=false"
        if (not defined $allow_recommends);
	$config_str .= " -o Acquire::AllowInsecureRepositories=yes";  <-- add this line
	$config_str .= " -o Dir=" . shellescape($dir);
	$config_str .= " -o Dir::Etc=" . shellescape("${dir}${etcdir}");

3 - Create chroot rootfs:
	mkdir debian_stretch
	cd debian_stretch

4 - Create multistrap.conf:

	[General]
	directory=target-rootfs
	cleanup=true
	noauth=true
	unpack=true
	debootstrap=Debian Net Utils
	aptsources=Debian
	
	[Debian]
	packages=apt kmod lsof
	source=http://cdn.debian.net/debian/
	keyring=debian-archive-keyring
	suite=stretch
	components=main contrib non-free
	
	[Net]
	#Basic packages to enable the networking
	packages=netbase net-tools ethtool udev iproute iputils-ping ifupdown isc-dhcp-client ssh
	source=http://cdn.debian.net/debian/
	
	[Utils]
	#General purpose utilities
	packages=locales adduser nano less wget dialog usbutils
	source=http://cdn.debian.net/debian/

5 - Install the rootf chroot:
	multistrap -a armhf -f multistrap.conf

6 - Copy qemu inside the chroot:
	cp /usr/bin/qemu-arm-static target-rootfs/usr/bin

7 - Link /dev for usage:
	mount -o bind /dev/ target-rootfs/dev/

8 - Start configuration:
	LC_ALL=C LANGUAGE=C LANG=C chroot target-rootfs dpkg --configure -a
	(answer No to "Use dash as the default system shell")

9 - Execute the initial setup script:
	./setup.sh (see below)

10 - Set root password:
	chroot target-rootfs passwd

11 - Update package database:
	LC_ALL=C LANGUAGE=C LANG=C chroot target-rootfs apt-get update

12 - Enable root login via ssh
	vi target-rootfs/etc/ssh/sshd_config
	(PermitRootLogin yes)

13 - Edit target-rootfs/root/.bashrc

14 - Use the chroot.sh script to enter the chroot

setup.sh:
--------------------------------------------------------------
#!/bin/sh
#Directory contains the target rootfs
TARGET_ROOTFS_DIR="target-rootfs"

#Board hostname
filename=$TARGET_ROOTFS_DIR/etc/hostname
echo stretch > $filename

#Default name servers
filename=$TARGET_ROOTFS_DIR/etc/resolv.conf
echo nameserver 8.8.8.8 > $filename
echo nameserver 8.8.4.4 >> $filename

#Default network interfaces
filename=$TARGET_ROOTFS_DIR/etc/network/interfaces
echo auto eth0 >> $filename
echo allow-hotplug eth0 >> $filename
echo iface eth0 inet dhcp >> $filename
#eth0 MAC address
echo hwaddress ether 00:04:25:12:34:56 >> $filename

#Set the the debug port
filename=$TARGET_ROOTFS_DIR/etc/inittab
echo T0:2345:respawn:/sbin/getty -L ttyS0 115200 vt100 >> $filename

#Set rules to change wlan dongles
filename=$TARGET_ROOTFS_DIR/etc/udev/rules.d/70-persistent-net.rules
echo SUBSYSTEM=='"net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="*", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="wlan*", NAME="wlan0"' > $filename

#microSD partitions mounting
filename=$TARGET_ROOTFS_DIR/etc/fstab
echo /dev/mmcblk0p1 /boot vfat noatime 0 1 > $filename
echo /dev/mmcblk0p2 / ext4 noatime 0 1 >> $filename
echo proc /proc proc defaults 0 0 >> $filename

#Add the standard Debian non-free repositories useful to load
#closed source firmware (i.e. WiFi dongle firmware)
filename=$TARGET_ROOTFS_DIR/etc/apt/sources.list
echo deb http://http.debian.net/debian/ stretch main contrib non-free > $filename
--------------------------------------------------------------


chroot.sh:
--------------------------------------------------------------
#!/bin/sh
LC_ALL=C LANGUAGE=C LANG=C chroot target-rootfs
--------------------------------------------------------------
